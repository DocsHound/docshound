generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  // For adminstrating global settings. For cloud-hosted, this will be one of our role accounts.
  // For self-hosted, this will usually be the owner the DocsHound deployment.
  // The first registered user will be autoset as a SUPERADMIN.
  SUPERADMIN
  ADMIN
  USER
}

// For all new tables, remember to create a manual migration to add RLS since we share the DB w/ Supabase.
// To do this, you can run `yarn prisma migrate dev --create-only` and edit the resulting migration file.

// Remember to update handle_new_user() function trigger OR set a default value
// when adding a new field here.
model User {
  id        String   @id @db.Uuid
  role      AppRole  @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  apiCredentials UserApiCredential[]
}

model GlobalApiCredential {
  id                             Int      @id @default(autoincrement())
  provider                       String   @unique
  encryptionIV                   String
  encryptedCredentials           String
  // For shared admin-user access tokens (e.g., Confluence Cloud).
  encryptedSharedUserCredentials String?
  // In case the refresh token expires, we need to mark this as invalid to re-prompt admin.
  validSharedUserCredentials     Boolean  @default(true)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @default(now()) @updatedAt
}

// For user-based permissioning (e.g., Slack search).
model UserApiCredential {
  id                   Int      @id @default(autoincrement())
  provider             String
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @db.Uuid
  encryptionIV         String
  encryptedCredentials String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  @@unique([userId, provider])
}

model SlackChannelIndexLog {
  channelID String
  latestTS  String
  nMessages Int
  createdAt DateTime @default(now())

  @@id([channelID, latestTS])
}

model ConfCloudIndexLog {
  id             Int      @id @default(autoincrement())
  fullIndex      Boolean
  latestModified DateTime
  nResults       Int
  createdAt      DateTime @default(now())
}
